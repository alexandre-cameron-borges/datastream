services:
  kafka-1:
    image: apache/kafka:3.7.0
    container_name: kafka-1
    restart: always
    ports:
      - "9092:9092"
    environment:
      # --- Kafka KRaft (sans ZooKeeper) ---
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      # --- Qualité de vie ---
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"   # crée 'source'/'result' si besoin
      CLUSTER_ID: "5L6g3nShT-eMCtK--X86sw"
    networks:
      - airflow-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - airflow-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3
    container_name: kibana
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
      - SERVER_PUBLICBASEURL=http://localhost:5601
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - airflow-network

  airflow:
    image: apache/airflow:2.9.1
    container_name: airflow
    restart: always
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt
      - ./airflow/dags/uber-split2.csv:/opt/airflow/dags/uber-split2.csv
    ports:
      - "8085:8080"
    command: >
      bash -c "
        pip install -r /opt/airflow/requirements.txt;
        airflow db init;
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin;
        airflow webserver -p 8080 & airflow scheduler
      "
    depends_on:
      - kafka-1
      - elasticsearch
    networks:
      - airflow-network

volumes:
  es_data:

networks:
  airflow-network:
    driver: bridge
